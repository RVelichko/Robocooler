#ifndef BOOST_STATIC_LINK
#   define BOOST_TEST_DYN_LINK
#endif // BOOST_STATIC_LINK

#define BOOST_TEST_MODULE BoostRegex
#define BOOST_AUTO_TEST_MAIN

#include <functional>
#include <string>

#include <boost/test/unit_test.hpp>
#include <boost/test/output_test_stream.hpp>

#include "Log.hpp"
#include "Bases.hpp"
#include "CommandHandler.hpp"


BOOST_AUTO_TEST_CASE(TestProductSend) {
    LOG_TO_STDOUT;
    std::vector<std::string> out_({"e2 00 00 16 18 0b 01 66 19 50 4d 10",
                                   "e2 00 10 63 10 0a 01 17 28 40 01 5e",
                                   "e2 00 10 63 10 0a 01 17 28 50 01 5f",
                                   "e2 00 10 63 10 0a 01 17 28 60 01 60"});
    std::vector<std::string> in_({"e2 00 10 63 10 0a 01 18 24 50 1b 4b",
                                  "e2 00 10 63 10 0a 01 18 24 60 1b 4c",
                                  "e2 00 10 63 10 0a 01 18 24 70 17 fd"});

    std::ostringstream oss;
    oss << "{";
    oss << "\"userActionOUT\":[";
    if (not out_.empty()) {
        for (auto &s : out_) {
            s = "\"" + s + "\"";
        }
        std::copy(out_.begin(), out_.end() - 1, std::ostream_iterator<std::string>(oss, ","));
        oss << out_.back();
    }
    oss << "],";
    oss << "\"userActionIN\":[";
    if (not in_.empty()) {
        for (auto &s : in_) {
            s = "\"" + s + "\"";
        }
        std::copy(in_.begin(), in_.end() - 1, std::ostream_iterator<std::string>(oss, ","));
        oss << in_.back();
    }
    oss << "],";
    /// Получить ответный json.
    std::string cooler_id = "0";
    oss << "\"param\":{\"ID\":\"" << cooler_id << "\"}";
    oss << "}";
    LOG(INFO) << oss.str();
}


//План работ:
//- Исследовательская работа:
//1 - Доработка библиотеки команд RFID устройства (добавление команд настройки режимов работы антенн и реалтаймового обслуживания)
//2 - Разработка логики управления настройками режимов работы антенн.
//3 - Разработка логики работы в режиме реального времени для RFID.
//4 - Разработка логики быстрого и более точного определения добавленных и удалённых продуктов.
//5 - Разработка методов и алгоритмов защиты от несанкционированного доступа или попыток обмана или мошенничества.
//- Дополнительные компоненты:
//1 - Добавление программной части обслуживания устройств для определения пристствия или приближения человека, ввода рук в зону холодильника.
//2 - Добавление программной части обслуживания устройств защиты, запирания и сигнализации.
//3 - Добавление программной части для отображения информации на мониторе.
//4 - Разработка системы "чёрный ящик".
//- Расширенные компоненты:
//1 - Добавление видео и аудио трансляции.
//2 - Разработка системы объмена с оператором обслуживания робота - холодильника.
//3 - Разработка системы голосового распознавания.
//4 - Разработка системы генерации голоса из текста для автоматизации ответов на простые запросы к холодильнику.
//5 - Разработка системы голосового управления холодильником.
//6 - Разработка операторской системы, для обслуживания множества холодильников.
//7 - Разработка компонент для кастомизации локального интерфейса холодильника, отображаемого монитором для арендаторов робота - холодильник.
//8 - Разработка локальной системы администрирования, настройки и диагностирования на месте робота - холодильник.
